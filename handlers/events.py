from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from utils.states import EventCreationStates
from AI.gpt import get_gpt_response
import json
import csv
import os

router = Router()

CSV_FILE_PATH = "events.csv"

if not os.path.exists(CSV_FILE_PATH):
    with open(CSV_FILE_PATH, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–ú–µ—Å—Ç–æ", "–ê–¥—Ä–µ—Å", "–¢–∏–ø —Å–æ–±—ã—Ç–∏—è", "–ì–æ—Å—Ç–∏"])

@router.callback_query(lambda c: c.data == "events")
async def start_event_creation(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    user_message = {"role": "user", "content": "–•–æ—á—É —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ."}
    messages = [user_message]

    response = get_gpt_response(messages)
    messages.append({"role": "assistant", "content": response})

    await state.update_data(event_data={}, chat_history=messages)
    await state.set_state(EventCreationStates.collecting_data)

    await callback.message.answer(response)

@router.message(EventCreationStates.collecting_data)
async def process_user_input(message: types.Message, state: FSMContext):
    user_input = message.text.strip()

    data = await state.get_data()
    chat_history = data.get("chat_history", [])
    event_data = data.get("event_data", {})

    chat_history.append({"role": "user", "content": user_input})
    chat_history.append({
        "role": "user",
        "content": f"–¢–µ–∫—É—â–∏–π JSON: {json.dumps(event_data, ensure_ascii=False)}"
    })

    response = get_gpt_response(chat_history)

    chat_history.pop()
    chat_history.append({"role": "assistant", "content": response})

    if "–ì–æ—Ç–æ–≤–æ" in response:
        try:
            extracted_json = response.split("–ì–æ—Ç–æ–≤–æ")[-1].strip()
            event_data = json.loads(extracted_json)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
            if any(
                "—É—Ç–æ—á–Ω–∏—Ç–µ" in str(value).lower()
                for key, value in event_data.items()
                if isinstance(value, str)
            ):
                await message.answer("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–±—É—é—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–±—ã—Ç–∏–µ.")
                await state.update_data(event_data=event_data, chat_history=chat_history)
                return

            with open(CSV_FILE_PATH, "a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow([
                    event_data.get("–ù–∞–∑–≤–∞–Ω–∏–µ"),
                    event_data.get("–î–∞—Ç–∞"),
                    event_data.get("–í—Ä–µ–º—è"),
                    event_data.get("–ú–µ—Å—Ç–æ"),
                    event_data.get("–ê–¥—Ä–µ—Å", ""),
                    event_data.get("–¢–∏–ø —Å–æ–±—ã—Ç–∏—è", ""),
                    ", ".join(event_data.get("–ì–æ—Å—Ç–∏", [])) if isinstance(event_data.get("–ì–æ—Å—Ç–∏"), list) else event_data.get("–ì–æ—Å—Ç–∏", "")
                ])

            await state.clear()
            await message.answer("–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ CSV!")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}")
    else:
        await state.update_data(event_data=event_data, chat_history=chat_history)
        await message.answer(response)


@router.message(commands=["show_events"])
async def show_events(message: types.Message):
    if not os.path.exists(CSV_FILE_PATH):
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.")
        return

    with open(CSV_FILE_PATH, "r", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        events = list(reader)

    if not events:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.")
        return

    text = "üìã <b>–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:</b>\n\n"
    for idx, event in enumerate(events, start=1):
        text += (
            f"<b>{idx}. {event['–ù–∞–∑–≤–∞–Ω–∏–µ']}</b>\n"
            f"üìÖ –î–∞—Ç–∞: {event['–î–∞—Ç–∞']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {event['–í—Ä–µ–º—è']}\n"
            f"üìç –ú–µ—Å—Ç–æ: {event['–ú–µ—Å—Ç–æ']}\n"
            f"üè† –ê–¥—Ä–µ—Å: {event['–ê–¥—Ä–µ—Å']}\n"
            f"üé≠ –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {event['–¢–∏–ø —Å–æ–±—ã—Ç–∏—è']}\n"
            f"üë• –ì–æ—Å—Ç–∏: {event['–ì–æ—Å—Ç–∏']}\n\n"
        )

    await message.answer(text, parse_mode="HTML")
